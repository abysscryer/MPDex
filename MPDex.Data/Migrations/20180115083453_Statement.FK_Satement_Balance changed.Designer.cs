// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MPDex.Data;
using MPDex.Models.Base;
using System;

namespace MPDex.Data.Migrations
{
    [DbContext(typeof(MPDexContext))]
    [Migration("20180115083453_Statement.FK_Satement_Balance changed")]
    partial class StatementFK_Satement_Balancechanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MPDex.Data.Operator", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MPDex.Data.OperatorRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MPDex.Models.Domain.Balance", b =>
                {
                    b.Property<Guid>("CustomerId");

                    b.Property<short>("CoinId");

                    b.Property<decimal>("BookAmount")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("decimal(20, 8)");

                    b.HasKey("CustomerId", "CoinId");

                    b.HasIndex("CoinId");

                    b.ToTable("Balance");
                });

            modelBuilder.Entity("MPDex.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<byte>("BookStatus");

                    b.Property<short?>("CoinId")
                        .IsRequired();

                    b.Property<Guid?>("CustomerId")
                        .IsRequired();

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<DateTime>("OnCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("OnUpdated")
                        .ValueGeneratedOnUpdate();

                    b.Property<byte>("OrderType");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(20, 8)");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("MPDex.Models.Domain.Coin", b =>
                {
                    b.Property<short>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("OnCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Coin");
                });

            modelBuilder.Entity("MPDex.Models.Domain.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<Guid?>("TradeId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("TradeId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("MPDex.Models.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("OnCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("MPDex.Models.Domain.Fee", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("CoinId")
                        .IsRequired();

                    b.Property<DateTime>("OnCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(3, 3)");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("MPDex.Models.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<short?>("CoinId")
                        .IsRequired();

                    b.Property<Guid?>("ContractId")
                        .IsRequired();

                    b.Property<Guid?>("CustomerId")
                        .IsRequired();

                    b.Property<DateTime>("OnCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<byte>("OrderType");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(20, 8)");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MPDex.Models.Domain.Statement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AfterAmount")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<decimal>("BeforeAmount")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<short>("CoinId");

                    b.Property<Guid>("CustomerId");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<short?>("FeeId");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<DateTime>("OnCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("OnUpdated")
                        .ValueGeneratedOnUpdate();

                    b.Property<Guid?>("OrderId")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<byte>("StatementType");

                    b.Property<string>("VerifyKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.HasIndex("FeeId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("CustomerId", "CoinId");

                    b.ToTable("Statement");
                });

            modelBuilder.Entity("MPDex.Models.Domain.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<short?>("CoinId")
                        .IsRequired();

                    b.Property<DateTime>("OnCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20, 8)");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.ToTable("Trade");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MPDex.Data.OperatorRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MPDex.Data.Operator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MPDex.Data.Operator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MPDex.Data.OperatorRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPDex.Data.Operator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MPDex.Data.Operator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MPDex.Models.Domain.Balance", b =>
                {
                    b.HasOne("MPDex.Models.Domain.Coin", "Coin")
                        .WithMany("Balances")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MPDex.Models.Domain.Customer", "Customer")
                        .WithMany("Balances")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MPDex.Models.Domain.Book", b =>
                {
                    b.HasOne("MPDex.Models.Domain.Coin", "Coin")
                        .WithMany("Books")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MPDex.Models.Domain.Customer", "Customer")
                        .WithMany("Books")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MPDex.Models.Domain.Contract", b =>
                {
                    b.HasOne("MPDex.Models.Domain.Trade", "Trade")
                        .WithMany("Contracts")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MPDex.Models.Domain.Fee", b =>
                {
                    b.HasOne("MPDex.Models.Domain.Coin", "Coin")
                        .WithMany("Fees")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MPDex.Models.Domain.Order", b =>
                {
                    b.HasOne("MPDex.Models.Domain.Coin", "Coin")
                        .WithMany("Orders")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MPDex.Models.Domain.Contract", "Contract")
                        .WithMany("Orders")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MPDex.Models.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MPDex.Models.Domain.Statement", b =>
                {
                    b.HasOne("MPDex.Models.Domain.Coin", "Coin")
                        .WithMany("Statements")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MPDex.Models.Domain.Customer", "Customer")
                        .WithMany("Statements")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MPDex.Models.Domain.Fee", "Fee")
                        .WithMany("Statements")
                        .HasForeignKey("FeeId");

                    b.HasOne("MPDex.Models.Domain.Order", "Order")
                        .WithOne("Statement")
                        .HasForeignKey("MPDex.Models.Domain.Statement", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MPDex.Models.Domain.Balance", "Balance")
                        .WithMany("Statements")
                        .HasForeignKey("CustomerId", "CoinId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MPDex.Models.Domain.Trade", b =>
                {
                    b.HasOne("MPDex.Models.Domain.Coin", "Coin")
                        .WithMany("Trades")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
